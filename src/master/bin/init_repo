#!/bin/bash
set -e

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
REPO_DIR=/talus/talus_code.git
REPO_CACHE=/talus/talus_code_cache

GITUSER=talus
GITGROUP=talus

function destroy_repo {
	if [ -d $REPO_DIR ]; then
	rm -rf $REPO_DIR
	fi

	if [ -d $REPO_CACHE ]; then
	rm -rf $REPO_CACHE
	fi
	mongo talus --eval 'db.code.remove({ })'
}

function create_repo {
        echo -e "\nCreating git repository"
	mkdir -p $REPO_DIR
	groupadd -f $GITGROUP
	useradd --create-home --skel /dev/null --home-dir $REPO_DIR -g $GITGROUP --shell /bin/false $GITUSER || true
	chown -v $GITUSER:$GITGROUP $REPO_DIR
	chmod -v 2770 $REPO_DIR # rwxrws---
	setfacl -R -m g:$GITGROUP:rwX $REPO_DIR
	setfacl -R -m d:g:$GITGROUP:rwX $REPO_DIR
	getfacl $REPO_DIR
        pushd $REPO_DIR
        git init --bare --shared=group
	popd
	getfacl $REPO_DIR
        git config --global user.email "master@talus"
        git config --global user.name "Talus Master"
        sudo git config --global user.email "master@talus"
        sudo git config --global user.name "Talus Master"
        echo -e "\nFinished creating git repository"
	usermod -a -G $GITGROUP root
	while read -p "Enter a username to add to group $GITGROUP <Just press enter without a username when done> " username && [[ ! -z $username ]]
	do
		usermod -a -G $GITGROUP $username 
		getent group $GITGROUP
	done  
}

function init_repo {
	echo -e "\nInitializing repository"
        if [ -d /tmp/talus_repo_init ]; then
		rm -rvf /tmp/talus_repo_init
        fi
        git clone $REPO_DIR /tmp/talus_repo_init
        pushd /tmp/talus_repo_init
        cp -vr $DIR/../git_repo/template/* .
        git add *
        git reset talus/tools/tool_template
        git reset talus/components/component_template

        git commit -m "initial commit, pre hook install"
        git push origin master

        install_hooks

        git add talus/components/component_template
        git commit -m "initial commit with component template"
        git push origin master

        git add talus/tools/tool_template
        git commit -m "2nd commit with tool template"
        git push origin master
        popd
	echo -e "\nFinished initializing repository"
}

function init_code_cache {
        echo -e "\nCreating code cache"
        mkdir -p $REPO_CACHE
	chown -v $GITUSER:$GITGROUP $REPO_CACHE
        chmod -v 2770 $REPO_CACHE # rwxrws---
        setfacl -R -m g:$GITGROUP:rwX $REPO_CACHE
        setfacl -R -m d:g:$GITGROUP:rwX $REPO_CACHE
        getfacl $REPO_CACHE
        pushd /tmp/talus_repo_init
        echo -e "\n" >> requirements.txt
        git add requirements.txt
        git commit -m "initial commit after hooks have been installed"
        git push origin master
        popd
        echo -e "\nFinished creating code cache"
}

function init_pypi {
	echo -e "\nInitializing pypi"
	requires=talus/requirements.txt
	pushd /tmp/talus_repo_init
	echo -e "\npymongo\ndocutils\n# $(date)" >> $requires
	cat $requires | sort | uniq > $requires.tmp
	mv -v $requires.tmp $requires
	git add $requires
	git commit -m "adding requirements.txt - updating global requirements"
	git push origin master
 	popd
	echo -e "\nFinished initializing pypi"
}

function cleanup {
        rm -rf /tmp/talus_repo_init
}

function install_hooks {
	echo -e "\nInstalling git hooks"
        # install the pre-receive hook
        cp -v $DIR/../git_repo/hooks/pre-receive $REPO_DIR/hooks/pre-receive
        chmod -v g+x $REPO_DIR/hooks/pre-receive
        #chown -v talus:talus $REPO_DIR/hooks/pre-receive

        # install the post-receive hook
        cp -v $DIR/../git_repo/hooks/post-receive $REPO_DIR/hooks/post-receive
        chmod -v g+x $REPO_DIR/hooks/post-receive
        #chown -v talus:talus $REPO_DIR/hooks/post-receive
}

create_repo
init_repo
init_code_cache
init_pypi
cleanup

